git config --global user.name "xuch2001"
git config --global user.email "xuch2001@163.com"
git init

ssh-keygen -t rsa -C "xuch2001@163.com" （创建SSH KEY，生成后在用户主目录下的.ssh目录，id_rsa和id_rsa.pub）

git add readme.txt
git commit -m "wrote a readme file"
git status
git diff readme.txt （diff只是比较工作区和暂存区的文件）
git log
git log --pretty=oneline
git reset --hard HEAD^  （回退到上一次提交的版本，覆盖工作区文件）
git reset HEAD filename （reset把暂存区的文件取消暂存，或者是用版本库的文件覆盖暂存区文件，工作区的文件不会有任何变化）
git reflog 
git checkout -- readme.txt  （checkout是把版本库或暂存区的文件覆盖到工作区，并不会把版本库的文件覆盖到暂存区）
git rm （删除版本库里的文件，提交后生效，提交前还可以git reset HEAD filename恢复）

git remote  （查看远程库）
git remote -v （查看远程库更详细信息）
git remote add origin git@server-name.com:path/repo-name.git （关联一个远程库）
git push -u origin master （第一次推送master分支的所有内容）
git push origin master （之后每次推送）
git push origin dev （推送其它分支）
git clone git@server-name:path/repo-name.git （从远程仓库克隆到本地）
git branch dev origin/dev （克隆远程仓库后，只能看到master主分支，并不能见到其它分支，该命令创建远程origin的dev分支到本地）
git pull （把最新的提交从远程当前分支更新下来）
git branch --set-upstream-to=origin/dev dev （指定本地dev分支与远程origin/dev分支的链接）
git branch -a （查看所有分支，包括本地和远程）
git branch -r （查看远程分支）
git branch -r -d origin/dev （删除远程分支dev，可和下一条命令结合使用）
git push origin :dev （删除远程分支，可与上一条命令结合使用）
git push origin --delete dev （删除远程分支dev）
git fetch origin master （获取远程master分支的所有更新）

git checkout -b dev （git checkout 命令加上 -b 参数表示创建并切换，相当于以下的两条命令：
git branch dev （创建dev分支）
git branch -d dev （删除dev分支）
git branch -D dev （强行删除dev分支）
git checkout dev (切换到dev分支）
git branch （查看分支，当前的分支前面会有个*号）
git merge dev （合并指定分支到当前分支，当前分支是master，把dev分支合并到master）
git log --graph （看分支合并图）
git log --graph --pretty=oneline --abbrev-commit
git merge --no-ff -m "comment for commit" dev （禁用Fast Forward模式合并，合并同时会做一次commit，所以加上-m参数，
                                                 普通模式合并后会留有分支信息，而Fast Forward模式合并后分支信息会丢失）
git stash （隐藏当前工作现场，包括工作区，暂存区，可多次隐藏）
git stash list （查看隐藏列表）
git stash apply stash@{1} （恢复隐藏的内容到工作区和暂存区，该命令不会删除隐藏的内容）
git stash drop stash@{1} （删除隐藏的内容）
git stash pop （恢复隐藏的内容到工作区和暂存区，同时删除隐藏的内容。PS：很奇怪，亲自测试下来，原来在暂存区的文件恢复后也到了工作区，和教程上不一样。）

git rebase （rebase操作可以把本地未push的分叉提交历史整理成直线）

git tag （查看标签）
git tag v1.0 （给当前分支的当前commit打上v1.0的标签）
git tag v1.1 5fdckd （给当前分支上commitID为5fdckd的commit打上标签v1.1）
git show v1.1 （查看标签为v1.1的标签信息）
git tag -a v1.2 -m "comment" 5fdckd （-a指定标签名称，-m指定说明文字，5fdckd为commitID）
git tag -d v1.1 （删除v1.1标签）
git push origin v1.1 （推送v1.1标签到远程）
git push origin --tags （一次性推送所有还未推送到远程的本地标签）
git push origin "refs/tags/v1.1 （删除远程标签，注意：要先删除本地标签，用git tag -d <tagname>）
